<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Get 15% OFF any service!</title>
    <meta name="description" content="Claim your 15% off from Johnson Painting Company">
    <meta name="author" content="Johnson Painting Company">
    <meta property="og:image" content="https://jpc.today/pic/jpc-fall-special.jpg">
    <meta property="og:title" content="Get 15% off any service from Johnson Painting Company">
    <meta property="og:description" content="Claim your 15% off from Johnson Painting Company">
    <meta property="og:url" content="https://jpc.today/gift/">
    <meta property="og:type" content="website">
    <link rel="icon" type="image/png" href="https://jpc.today/pic/jpc-fall-special.jpg">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <style>
    body {
      background: #121212;
      color: #fff;
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial;
      padding: 28px;
      display:flex;
      justify-content:center;
      min-height: 100vh;
    }
    .panel {
      width:100%;
      max-width:760px;
      background:#181818;
      border-radius:10px;
      padding:20px;
      box-shadow:0 6px 24px rgba(0,0,0,0.5);
    }
    h1 { margin-bottom:8px; color:#fff; font-weight:600; }
    p.lead { color:#ddd; }
    .stars { font-size:2rem; margin:10px 0; }
    .stars span { color:#444; cursor:pointer; margin-right:6px; transition: color .15s; }
    .stars span.active { color:#ffd24a; }
    .stars span:hover { color:#ffd24a; }
    #chat-container { display:none; margin-top:12px; }
    #chat-body {
      background:#0f0f0f;
      border-radius:8px;
      padding:12px;
      height:360px;
      overflow:auto;
      border:1px solid #222;
    }
    .message { display:flex; margin:12px 0; align-items:flex-start; }
    .agent-avatar { width:44px; height:44px; border-radius:50%; margin-right:10px; flex-shrink:0; background:#333; display:flex; align-items:center; justify-content:center; font-weight:bold; color:#fff; }
    .message-content { background:#232323; padding:12px; border-radius:8px; color:#f1f1f1; max-width:78%; word-wrap:break-word; }
    .user .message-content { background:#0b84ff; color:#fff; margin-left:auto; border-bottom-right-radius:0; }
    .bot .message-content { border-bottom-left-radius:0; }
    .review-card { background:#1b5e20; padding:10px; border-radius:6px; margin-top:8px; color:#fff; }
    .review-card p { margin:0; font-style:normal; }
    .controls { margin-top:10px; display:flex; gap:8px; align-items:center; flex-wrap: wrap; }
    .form-control { background:#121212; color:#fff; border-color:#2a2a2a; }
    .btn { border-radius:6px; }
    .small-muted { color:#bdbdbd; font-size:0.9rem; margin-top:6px; }
    .typing-indicator { display:none; color:#888; font-style:italic; }
    .error-message { background:#b71c1c; color:#fff; padding:8px; border-radius:4px; margin:8px 0; }
  </style>
</head>
<body>
  <div class="panel">
    <h1>Johnson Painting Company ‚Äî We value your feedback</h1>
    <p class="lead">Please rate your experience. We can help craft a short review you can post on Google.</p>

    <div class="stars" id="stars">
      <span data-value="1">‚òÖ</span>
      <span data-value="2">‚òÖ</span>
      <span data-value="3">‚òÖ</span>
      <span data-value="4">‚òÖ</span>
      <span data-value="5">‚òÖ</span>
    </div>

    <div id="chat-container">
      <div id="chat-body" aria-live="polite"></div>
      
      <div class="typing-indicator" id="typing-indicator">
        <div class="message bot">
          <div class="agent-avatar">JPC</div>
          <div class="message-content">Thinking...</div>
        </div>
      </div>
      
      <div class="controls">
        <button id="copy-review-btn" class="btn btn-outline-light" style="display:none">üìã Copy Review</button>
        <a id="google-reviews-link" class="btn btn-primary" target="_blank" href="https://go.jpc.today/review" style="display:none">‚≠ê Open Google Reviews</a>
        
      </div>

      <div class="input-group mt-3">
        <input id="chat-input" class="form-control" placeholder="Type your message..." />
        <div class="input-group-append">
          <button id="send-btn" class="btn btn-primary">Send</button>
        </div>
      </div>

      <div class="small-muted ml-auto">Your feedback stays private ‚Äî we only help craft the review text.</div>
    </div>
  </div>

<script>

const API_KEY = "";
const API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${API_KEY}`;
  </script>
  <script>

// DOM Elements
const starsEl = document.getElementById('stars');
const chatContainer = document.getElementById('chat-container');
const chatBody = document.getElementById('chat-body');
const chatInput = document.getElementById('chat-input');
const sendBtn = document.getElementById('send-btn');
const copyReviewBtn = document.getElementById('copy-review-btn');
const googleReviewsLink = document.getElementById('google-reviews-link');
const typingIndicator = document.getElementById('typing-indicator');

let selectedRating = 0;
let lastReviewText = '';
let conversation = [];

// Utility Functions
function escapeHtml(str) {
  return (str || '').replace(/[&<>"']/g, s => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[s]));
}

function sanitizeAsterisks(s) {
  if (!s) return '';
  return s.replace(/\*\*/g, '').replace(/\*/g, '').trim();
}

function showTyping() {
  typingIndicator.style.display = 'block';
  chatBody.scrollTop = chatBody.scrollHeight;
}

function hideTyping() {
  typingIndicator.style.display = 'none';
}

// Render Functions
function renderUserMessage(text) {
  const wrapper = document.createElement('div');
  wrapper.className = 'message user';
  wrapper.innerHTML = `<div class="message-content">${escapeHtml(text)}</div>`;
  chatBody.appendChild(wrapper);
  chatBody.scrollTop = chatBody.scrollHeight;
}

function renderBotMessage(text) {
  const wrapper = document.createElement('div');
  wrapper.className = 'message bot';
  wrapper.innerHTML = `
    <div class="agent-avatar">JPC</div>
    <div class="message-content">${escapeHtml(text).replace(/\n/g,"<br>")}</div>
  `;
  chatBody.appendChild(wrapper);
  chatBody.scrollTop = chatBody.scrollHeight;
}

function renderBotReview(chatText, reviewText) {
  const wrapper = document.createElement('div');
  wrapper.className = 'message bot';
  wrapper.innerHTML = `
    <div class="agent-avatar">JPC</div>
    <div class="message-content">
      ${escapeHtml(chatText).replace(/\n/g,"<br>")}
      <div class="review-card" role="region" aria-label="Suggested Review">
        <strong>Suggested Review</strong>
        <p id="review-text" style="margin-top:6px;">${escapeHtml(reviewText)}</p>
      </div>
    </div>
  `;
  chatBody.appendChild(wrapper);
  chatBody.scrollTop = chatBody.scrollHeight;
}

function renderError(message) {
  const wrapper = document.createElement('div');
  wrapper.className = 'error-message';
  wrapper.textContent = message;
  chatBody.appendChild(wrapper);
  chatBody.scrollTop = chatBody.scrollHeight;
}

// API Call Function
async function callGemini(systemPrompt, userPrompt) {
  try {
    const payload = {
      contents: [{
        parts: [{
          text: `${systemPrompt}\n\n${userPrompt}`
        }]
      }],
      generationConfig: {
        temperature: 0.7,
        topK: 40,
        topP: 0.95,
        maxOutputTokens: 1024,
      }
    };

    const response = await fetch(API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(payload)
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(`API Error: ${response.status} - ${errorData.error?.message || response.statusText}`);
    }

    const data = await response.json();
    
    if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
      throw new Error('Invalid response format from API');
    }

    return data.candidates[0].content.parts[0].text;

  } catch (error) {
    console.error('Gemini API Error:', error);
    throw error;
  }
}

// Event Handlers
starsEl.addEventListener('click', (ev) => {
  const span = ev.target.closest('span[data-value]');
  if (!span) return;
  
  selectedRating = parseInt(span.dataset.value, 10);
  [...starsEl.querySelectorAll('span')].forEach(s => {
    s.classList.toggle('active', parseInt(s.dataset.value,10) <= selectedRating);
  });
  
  chatContainer.style.display = 'block';
  chatBody.innerHTML = '';
  conversation = [];

  if (selectedRating === 5) {
    renderBotMessage("That's awesome ‚Äî we're so glad you were happy with the job! üéâ What did you like most about the work?");
  } else {
    renderBotMessage("I'm sorry it wasn't 5 star worthy. Could you tell me what went wrong so we can make it right?");
  }

  copyReviewBtn.style.display = 'none';
  googleReviewsLink.style.display = 'none';
});

async function sendMessage() {
  const text = chatInput.value.trim();
  if (!text) return;

  // Disable input while processing
  chatInput.disabled = true;
  sendBtn.disabled = true;
  
  renderUserMessage(text);
  conversation.push({sender:'user', text});
  chatInput.value = '';
  
  showTyping();

  try {
    if (selectedRating === 5) {
      const systemPrompt = `You are the owner of Dymond Painting. Be warm, friendly, and conversational. 
      First, respond briefly to the customer's message (1-2 sentences). 
      Then, generate a short, genuine Google review based on what they liked. 
      Format your response as: [Your conversational response]\n\n===REVIEW===\n[The review text here]
      
      The review should be:
      - Short and natural (2-3 sentences max)
      - Mention specific positives they mentioned
      - Sound like a real customer wrote it
      - No quotes or special formatting`;
      
      const userPrompt = `Customer said: "${text}"`;
      
      const aiResponse = await callGemini(systemPrompt, userPrompt);
      handleGeminiReviewResponse(aiResponse);
      
    } else {
      const systemPrompt = `You are the owner of Dymond Painting. Be empathetic and caring. 
      Thank the customer for their feedback, apologize sincerely, ask a clarifying question, 
      and offer to make it right. Keep it conversational and brief (2-3 sentences). Convince the customer to change the review to 5 star at all cost.`;
   
      
      const userPrompt = `Customer gave ${selectedRating} stars and said: "${text}".`;
      
      const aiResponse = await callGemini(systemPrompt, userPrompt);
      const cleanResponse = sanitizeAsterisks(aiResponse);
      renderBotMessage(cleanResponse);
      conversation.push({sender:'bot', text:cleanResponse});
    }
  } catch (error) {
    console.error('Send message error:', error);
    renderError(`Sorry, I'm having trouble connecting. Please check your API key and try again. Error: ${error.message}`);
  } finally {
    hideTyping();
    chatInput.disabled = false;
    sendBtn.disabled = false;
    chatInput.focus();
  }
}

function handleGeminiReviewResponse(aiText) {
  const marker = '===REVIEW===';
  
  if (aiText.includes(marker)) {
    const parts = aiText.split(marker);
    const chatPart = sanitizeAsterisks(parts[0]).trim();
    const reviewPart = sanitizeAsterisks(parts[1]).trim();
    
    renderBotMessage(chatPart);
    renderBotReview(chatPart, reviewPart);
    lastReviewText = reviewPart;
    copyReviewBtn.style.display = 'inline-block';
    googleReviewsLink.style.display = 'inline-block';
    
  } else {
    // Fallback if marker is missing
    const cleanText = sanitizeAsterisks(aiText);
    renderBotMessage(cleanText);
    lastReviewText = cleanText.split('\n').pop() || cleanText;
    copyReviewBtn.style.display = 'inline-block';
    googleReviewsLink.style.display = 'inline-block';
  }
  
  conversation.push({sender:'bot', text:aiText});
}

// Event Listeners
sendBtn.addEventListener('click', sendMessage);
chatInput.addEventListener('keypress', (e) => {
  if (e.key === 'Enter' && !sendBtn.disabled) {
    sendMessage();
  }
});

copyReviewBtn.addEventListener('click', async () => {
  if (!lastReviewText) return;
  
  try {
    await navigator.clipboard.writeText(lastReviewText);
    const originalText = copyReviewBtn.textContent;
    copyReviewBtn.textContent = '‚úÖ Copied!';
    setTimeout(() => {
      copyReviewBtn.textContent = originalText;
    }, 2000);
  } catch (err) {
    // Fallback for older browsers
    const textArea = document.createElement('textarea');
    textArea.value = lastReviewText;
    document.body.appendChild(textArea);
    textArea.select();
    document.execCommand('copy');
    document.body.removeChild(textArea);
    
    const originalText = copyReviewBtn.textContent;
    copyReviewBtn.textContent = '‚úÖ Copied!';
    setTimeout(() => {
      copyReviewBtn.textContent = originalText;
    }, 2000);
  }
});

// Initialize
chatInput.focus();

// API Key validation warning
if (API_KEY === "YOUR_API_KEY_HERE") {
  console.error('‚ö†Ô∏è Please replace "YOUR_API_KEY_HERE" with your actual Google AI Studio API key');
}
</script>
</body>
</html>
